[{"content":"## Welcome to Notebook JS/TS\n#### This is an interactive coding environment for JavaScript (and partial support for Typescript), resembling Jupyter Notebook. \nTwo types of cells are available for your use - text cells and code cells.\n\nI'm a text cell. Click me to edit this text via markdown syntax. Click outside the cell to view my formatted content. Click the arrow buttons to move me up or downs (I can also be deleted by clicking the x button).\n\nTo add new cells, simply click the +code / +cell buttons .","type":"text","id":"iuvb2"},{"content":"// I'm a code cell, where you may input some js or jsx code\n// for the browser to bundle and execute (using ESBuild).\n// Use the built-in show() function to view code output in the preview pane:\nconst msg = 'hello world';\nshow(msg);","type":"code","id":"79jnx"},{"content":"// import your libraries as usual, and notebook-js-ts will \r\n// automatically try to fetch their source code from `unpkg.com`:\r\nimport React from 'react'; \r\nimport ReactDOM from 'react-dom'; ","type":"code","id":"yott7"},{"content":"// Cumulutavie bundling is enabled between code cells, so if\n// the React library is imported in the previous cell, the\n// current cell is also able to execute a React component:\nconst App = () => <h1>I'm a rendered React component</h1>;\n\n// The simplest way do display the component is via show():\nshow(<App />);","type":"code","id":"qg4y2"},{"content":"// But regular render() is also available:\nconst Component = () => <h1>I'm a rendered React component too</h1>;\nReactDOM.render(<Component />, document.querySelector('#root'));","type":"code","id":"dighe"},{"content":"// Toggle the language mode on the top left corner to choose\r\n// between JavaScript and TypeScript.\r\n// Note that TypeScript is treated as \"type-checked JavaScript\" -\r\n// this editor does not perform a type check at the moment\r\n\r\nenum Directions {\r\n    Up = \"UP\",\r\n    Down = \"DOWN\",\r\n}\r\nshow(Directions.Down);","type":"code","id":"a2hr5"},{"content":"When running notebook-js-ts from your terminal, a mynotes.js file is created by default under the root directory, saving your changes. You can reopen the notebook via `npx notebook-js-ts serve mynotes.js`, or via `notebook-js-ts serve mynotes.js` if the cli is installed globally (file name is optional). Navigate to http://localhost:4005 to edit the file. You can also choose to serve the file from another port via `npx notebook-js-ts serve mynotes.js -p-<port number>`, or `notebook-js-ts serve mynotes.js -p-<port number>` respectively.","type":"text","id":"jaqfn"},{"content":"### HAPPY CODING!\n","type":"text","id":"rjgxg"}]